/*global setTimeout*/
(function (context) {
	'use strict';

	//if one of define or require already exists then throw an erro
	//to avoid silly things such as overriding native CommonJS support
	if (context.define) {
		throw 'define is already defined in the global scope, cannot continue';
	}

	if (context.require) {
		throw 'require is already defined in the global scope, cannot continue';
	}

	var _modules = {},
		definitions = {},
		processing = {},
	//help minification
		arrType = Array,
		funcType = Function,
		strType = 'string',
		yes = true,
		nil = null,
		define,
		require;

	var head = document.getElementsByTagName('head')[0];


	/**
	 * Processes a _module definition for a require call
	 *
	 * @private
	 *
	 * @param {String} id The identifier of the _module to process
	 * @param {Number} reqId The unique identifier generated by the require call
	 * @param {Function} callback A callback function
	 *
	 * @return {Object} The result of the _module definition
	 *
	 * @throws {Error} If the processed _module has circular dependencies
	 * @throws {Error} If id refers to an undefined _module
	 */
	function process(id, reqId, callback) {


		var _module = _modules[id];

		if (_module) {
			return _module;
		}

//		console.log('Processing ' + id);

		_module = definitions[id];

		if (!_module) {
//			console.log('_module ' + id + ' is not defined. Loading via ajax');

			var node = document.createElement('script');
			node.type = 'text/javascript';
			node.charset = 'utf-8';
			node.async = true;

			if (node.attachEvent && !(node.attachEvent.toString && node.attachEvent.toString().indexOf('[native code') < 0) && !isOpera) {
				node.attachEvent('onreadystatechange', function (evt) {
					if (evt.type === 'load' ||
						(readyRegExp.test((evt.currentTarget || evt.srcElement).readyState))) {
						setTimeout(function () {
							process(id, reqId, callback, true);
						}, 4);
					}

				});
			} else {
				node.addEventListener('load', function (evt) {
					if (evt.type === 'load' ||
						(readyRegExp.test((evt.currentTarget || evt.srcElement).readyState))) {
						setTimeout(function () {
							process(id, reqId, callback, true);
						}, 4);
					}

				}, false);
			}

			node.src = id + '.js';
			head.appendChild(node);
			return;
		}

		if (_module && _module.def) {
//			console.log('Found definition for ' + id + '.');

			if (_module.dep instanceof arrType) {
//				console.log('Loading dependancies for ' + id + '.', _module.dep);
				getDeps(_module.dep, reqId, function(){
//					console.log('Loaded all dependancies for ' + id + '.', arguments);
					_modules[id] = _module = _module.def.apply(context, arguments);

					callback(id, _modules[id]);
				});
			} else {
//				console.log('No dependancies for ' + id + '. Loading...');

				_modules[id] = _module = _module.def.apply(context);

				callback(id, _modules[id]);
			}

		} else {
			throw '_module ' + id + ' is not defined.';
		}
	}

	/**
	 * Defines a new _module
	 *
	 * @public
	 *
	 * @example define('mymod', function () { return {hello: 'World'}; });
	 * @example define('mymod', ['dep1', 'dep2'], function (dep1, dep2) { ... });
	 *
	 * @param {String} id The identificator for the new _module
	 * @param {Array} dependencies [Optional] A list of _module id's which
	 * the new _module depends on
	 * @param {Object} definition The definition for the _module
	 *
	 * @throws {Error} If id is not passed or undefined
	 * @throws {Error} If id doesn't have a definition
	 * @throws {Error} If dependenices is not undefined but not an array
	 */
	define = function (id, dependencies, definition) {
		if (typeof id !== strType) {
			throw "_module id missing or not a string. " + (new Error().stack || '').replace(/\n/g, ' / ');
		}

		//no dependencies array, it's actually the definition
		if (!definition && dependencies) {
			definition = dependencies;
			dependencies = nil;
		}

		if (!definition) {
			throw "_module " + id + " is missing a definition.";
		} else if (definition instanceof funcType) {
			if (dependencies === nil || dependencies instanceof arrType) {
				definitions[id] = {def: definition, dep: dependencies};
			} else {
				throw 'Invalid dependencies for _module ' + id;
			}
		} else {
			_modules[id] = definition;
		}
	};

	/**
	 * Declares support for the AMD spec
	 *
	 * @public
	 */
	define.amd = {
		/**
		 * @see https://github.com/amdjs/amdjs-api/wiki/jQuery-and-AMD
		 */
		jQuery: yes
	};

	function getDeps(ids, reqId, callback) {

		var m = [], l = 0;

		for (var x = 0, y = l = ids.length; x < y; x += 1) {

			getDep(ids[x], reqId, function (id, _module) {
				m[ids.indexOf(id)] = _module;

				if (--l === 0) {
					callback.apply(context, m);
				}
			});

		}

	}

	function getDep(id, reqId, callback) {
		if (_modules[id]) {
			return callback(id, _modules[id]);
		} else {
			var pid = processing[reqId];

			if (!pid) {
				pid = processing[reqId] = {length: 0};
			}

			if (!pid[id]) {
				pid.length += 1;
				pid[id] = [];
			}

			processing[reqId][id].push(callback);
			setTimeout(function () {
				process(id, reqId, function (id, result) {
					if (pid[id]) {
						for (var i = pid[id].length; i > 0; i--) {
							pid[id][i - 1](id, result);
						}
					}

					delete definitions[id];
					delete pid[id];
					pid.length -= 1;

					if (!pid.length) {
						delete processing[reqId];
					}
				});
			}, 4);
		}
	}

	/**
	 * Requires pre-defined _modules and injects them as dependencies into
	 * a callback, the process is non-blocking
	 *
	 * @public
	 *
	 * @example require(['mymod'], function (mymod) { ... });
	 * @example require(['mymod'], function (mymod, another) {}, function (err) {});
	 *
	 * @param {Array} ids An array of dependencies as moudule indentifiers
	 * @param {Function} callback The callback run in case of success, it will
	 * receive all the dependencies specified in ids as arguments
	 * @param {Function} errHandler [Optional] The callback to run in case of
	 * failure, should accept the error reference as the only parameter
	 *
	 * @throws {Error} If ids is not an array and/or callback is not a function
	 */
	require = function (ids, callback, errHandler) {

		if (ids instanceof arrType && callback instanceof funcType) {
			//execute asynchronously
			setTimeout(function () {
				try {
					getDeps(ids, Math.random(), callback);
				} catch (err) {
					if (errHandler instanceof funcType) {
						errHandler.call(context, err);
					} else {
						throw err;
					}
				}
			}, 4);
		} else {

			throw 'Invalid require call - ids: ' + JSON.stringify(ids);
		}
	};

	require.__modules = _modules;
	require.__pending = processing;

	//expose needed functions to context
	context.require = require;
	context.define = define;
}(this));